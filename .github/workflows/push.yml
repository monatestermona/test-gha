name: Workflow for Webhook

on:
  push:
  # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v1.0.0

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Test
      run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo $RELEASE_VERSION
          echo ${{ env.RELEASE_VERSION }}
          echo "version:${{  github.ref_name }}"
    - uses: actions/checkout@v1
    - name: Build and Test
      shell: bash
      run: |
        echo "Build and Test as asdfsdf asdf asdfs sadfsd asdfsdff bbccccdddd asdfd asdf yyyyy asd asdf   asdfdf "
        echo "BUILD_STATE=successful" >> $GITHUB_ENV
    - name: Failed Build
      if: failure()
      run: echo "BUILD_STATE=failed" >> $GITHUB_ENV
    - name: Parse Jira Keys from Commit
      id: jira_keys
      if: always()
      uses: HighwayThree/jira-extract-issue-keys@master
      with:
        is-pull-request: ${{ github.event_name == 'pull_request' }}
        parse-all-commits: ${{ github.event_name == 'push' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Push Build Info to Jira
      if: steps.jira_keys.outputs.jira-keys != ''
      id: push_build_info_to_jira
      uses: HighwayThree/jira-upload-build-info@master
      with:
        client-id: '${{ secrets.CLIENT_ID }}'
        client-secret: '${{ secrets.CLIENT_SECRET }}'
        cloud-instance-base-url: '${{ secrets.CLOUD_INSTANCE_BASE_URL }}'
        pipeline-id: '${{ github.repository }} ${{ github.workflow }}'
        build-number: ${{ github.run_number }}
        build-display-name: 'Workflow: ${{ github.workflow }} (#${{ github.run_number }})'
        build-state: "${{ env.BUILD_STATE }}"
        build-url: '${{github.event.repository.url}}/actions/runs/${{github.run_id}}'
        update-sequence-number: '${{ github.run_id }}'
        last-updated: '${{github.event.head_commit.timestamp}}'
        issue-keys: "${{ steps.jira_keys.outputs.jira-keys }}"
        commit-id: '${{ github.sha }}'
        repo-url: '${{ github.event.repository.url }}'
        build-ref-url: '${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}'
    - name: Confirm Jira Build Output
      if: success()
      run: |
        echo "Jira Upload Build Info response: ${{ steps.push_build_info_to_jira.outputs.response }}"

  deploy_to_test:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: github.event_name == 'push' #&&  github.ref == 'refs/heads/release/1.0.0'
    steps:
      - name: Deploy to Test
        run: |
          echo "Deploying to Test..."
          echo "github.event_name: ${{github.event_name}}"
          echo "github.ref: ${{github.ref}}"
          echo "DEPLOY_STATE=successful"  >> $GITHUB_ENV
      - name: Failed Deployment
        if: failure()
        run: echo "DEPLOY_STATE=failed" >> $GITHUB_ENV
      - name: Parse Jira Keys from All Commits
        id: jira_keys
        if: always()
        uses: HighwayThree/jira-extract-issue-keys@master
        with:
          is-pull-request: ${{ github.event_name == 'pull_request' }}
          parse-all-commits: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Confirm Deploy State and Jira Key Values
        if: always()
        run: |
          echo "DEPLOY_STATE: ${{env.DEPLOY_STATE}}"
          echo "Jira Keys: ${{steps.jira_keys.outputs.jira-keys}}"
      - name: Push Deployment Info to Jira
        if: steps.jira_keys.outputs.jira-keys != ''
        id: push_deployment_info_to_jira
        uses: HighwayThree/jira-upload-deployment-info@master
        with:
          cloud-instance-base-url: '${{ secrets.CLOUD_INSTANCE_BASE_URL }}'
          client-id: '${{ secrets.CLIENT_ID }}'
          client-secret: '${{ secrets.CLIENT_SECRET }}'
          deployment-sequence-number: '${{ github.run_id }}'
          update-sequence-number: '${{ github.run_id }}'
          issue-keys: "${{ steps.jira_keys.outputs.jira-keys }}"
          display-name: "Deployment number asdf"
          url: "${{github.event.repository.url}}/actions/runs/${{github.run_id}}"
          description: "Test Deployment"
          last-updated: '${{github.event.head_commit.timestamp}}'
          label: 'Test Deployment Label'
          state: '${{env.DEPLOY_STATE}}'
          pipeline-id: '${{ github.repository }} ${{ github.workflow }}'
          pipeline-display-name: 'Workflow: ${{ github.workflow }} (#${{ github.run_number }})'
          pipeline-url: '${{github.event.repository.url}}/actions/runs/${{github.run_id}}'
          environment-id: 'Test'
          environment-display-name: 'Test'
          environment-type: 'testing'
      - name: Confirm Jira Deploy Output
        if: success()
        shell: bash
        run: |
          echo "Jira Upload Deploy Info response: ${{steps.push_deployment_info_to_jira.outputs.response}}"
        #  curl -X POST -H 'Content-type: application/json' --data '{"issues": [${{ toJSON(steps.jira_keys.outputs.jira-keys) }}], "data": {"releaseVersion":"5.3.2"}, "buildNumber": ${{ github.run_number }}, "issues": [${{ toJSON(steps.jira_keys.outputs.jira-keys) }}]}' "https://automation.atlassian.com/pro/hooks/a53aae5d84c64672265f49a009bb2ab9589eafbb"

  deploy_to_prod:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: github.event_name == 'push' #&&  github.ref == 'refs/heads/master'
    steps:
      - name: Deploy to Prod
        run: |
          echo "github.event_name: ${{github.event_name}}"
          echo "github.ref: ${{github.ref}}"
          echo "DEPLOY_STATE=successful" >> $GITHUB_ENV
          echo "Deploying to Prod..."
      - name: Failed Deployment
        if: failure()
        run: echo "DEPLOY_STATE=failed" >> $GITHUB_ENV
      - name: Parse Jira Keys from All Commits
        id: jira_keys
        if: always()
        uses: HighwayThree/jira-extract-issue-keys@master
        with:
          is-pull-request: ${{ github.event_name == 'pull_request' }}
          parse-all-commits: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Confirm Deploy State and Jira Key Values
        if: always()
        run: |
          echo "DEPLOY_STATE: ${{env.DEPLOY_STATE}}"
          echo "Jira Keys: ${{steps.jira_keys.outputs.jira-keys}}"
      - name: Push Deployment Info to Jira
        if: steps.jira_keys.outputs.jira-keys != ''
        id: push_deployment_info_to_jira
        uses: HighwayThree/jira-upload-deployment-info@master
        with:
          cloud-instance-base-url: '${{ secrets.CLOUD_INSTANCE_BASE_URL }}'
          client-id: '${{ secrets.CLIENT_ID }}'
          client-secret: '${{ secrets.CLIENT_SECRET }}'
          deployment-sequence-number: '${{ github.run_id }}'
          update-sequence-number: '${{ github.run_id }}'
          issue-keys: "${{ steps.jira_keys.outputs.jira-keys }}"
          display-name: "Deployment number: '${{ github.run_id }}'"
          url: "${{github.event.repository.url}}/actions/runs/${{github.run_id}}"
          description: "Prod Deployment"
          last-updated: '${{github.event.head_commit.timestamp}}'
          label: 'Prod Deployment Label'
          state: '${{env.DEPLOY_STATE}}'
          pipeline-id: '${{ github.repository }} ${{ github.workflow }}'
          pipeline-display-name: 'Workflow: ${{ github.workflow }} (#${{ github.run_number }})'
          pipeline-url: '${{github.event.repository.url}}/actions/runs/${{github.run_id}}'
          environment-id: 'Prod'
          environment-display-name: 'Prod'
          environment-type: 'production'
          release-version: ${{  github.ref_name }}
      - name: Confirm Jira Deploy Output
        if: success()
        shell: bash
        run: |
          echo "Jira Production Deploy Info response:  ${{steps.push_deployment_info_to_jira.outputs.response}}"
          curl -X POST -H 'Content-type: application/json' --data '{"issues": [${{ toJSON(steps.jira_keys.outputs.jira-keys) }}], "data": {"version":"${{  github.ref_name }}"}, "buildNumber": ${{ github.run_number }}, "issues": [${{ toJSON(steps.jira_keys.outputs.jira-keys) }}]}' "https://automation.atlassian.com/pro/hooks/a53aae5d84c64672265f49a009bb2ab9589eafbb"
  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
        name: Checkout
      - name: "Build Changelog"
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v3
        with:
          configurationJson: |
            {
                  "categories": [
      {
        "title": "## üöÄ Features",
        "labels": ["feature"]
      },
      {
        "title": "## üêõ Fixes",
        "labels": ["fix"]
      },
      {
        "title": "## üß™ Tests",
        "labels": ["test"]
      },
      {
        "title": "## üß™ Tests and some ü™Ñ Magic",
        "labels": ["test", "magic"],
        "exclude_labels": ["no-magic"],
        "exhaustive": true,
        "empty_content": "- no matching PRs",
        "rules": [
          {
            "pattern": "open",
            "on_property": "status",
            "flags": "gu"
          }
        ]
      }
    ],
    "ignore_labels": [
      "ignore"
    ],
    "sort": {
      "order": "ASC",
      "on_property": "mergedAt"
    },
    "template": "${{CHANGELOG}}\n\n<details>\n<summary>Uncategorized</summary>\n\n${{UNCATEGORIZED}}\n</details>",
    "pr_template": "- ${{TITLE}}\n   - PR: #${{NUMBER}}",
    "empty_template": "- no changes",
    "label_extractor": [
      {
        "pattern": "(.) (.+)",
        "target": "$1",
        "flags": "gu"
      },
      {
        "pattern": "\\[Issue\\]",
        "on_property": "title",
        "method": "match"
      }
    ],
    "duplicate_filter": {
      "pattern": "\\[ABC-....\\]",
      "on_property": "title",
      "method": "match"
    },
    "transformers": [
      {
        "pattern": "[\\-\\*] (\\[(...|TEST|CI|SKIP)\\])( )?(.+?)\n(.+?[\\-\\*] )(.+)",
        "target": "- $4\n  - $6"
      }
    ],
    "trim_values": false,
    "max_tags_to_fetch": 200,
    "max_pull_requests": 200,
    "max_back_track_time_days": 365,
    "exclude_merge_branches": [
      "Owner/qa"
    ],
    "tag_resolver": {
      "method": "semver",
      "filter": {
        "pattern": "api-(.+)",
        "flags": "gu"
      }
    },
    "base_branches": [
      "dev"
    ]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: "Build Changelog"
        run: |
          echo ${{steps.github_release.outputs.changelog}} 
      